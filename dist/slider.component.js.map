{"version":3,"file":"slider.component.js","sourceRoot":"","sources":["../src/slider.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { customElement, property, query, queryAll } from 'lit-element';\r\nimport { Base } from '@spectrum/sp-base';\r\nimport sliderStyles from './slider.styles';\r\nimport template from './slider.template';\r\n\r\n@customElement('sp-slider')\r\nexport class Slider extends Base {\r\n  public static componentStyles = [sliderStyles];\r\n\r\n  @property({ type: Boolean }) disabled = false;\r\n  @property({ type: Boolean }) simpleStyle = false;\r\n  @property({ type: Boolean }) color = false;\r\n  @property({ type: Boolean }) ramp = false;\r\n  @property({ type: Boolean }) tick = false;\r\n  @property({ type: Boolean }) filled = false;\r\n  @property({ type: String }) colorStyle = '';\r\n  @property({ type: String }) label = '';\r\n  @property({ type: String }) value = '';\r\n  @property({ type: Number }) min = 5;\r\n  @property({ type: Number }) max = 50;\r\n  @property({ type: Number }) step = 1;\r\n\r\n  @query('.spectrum-Slider-handle')\r\n  protected sliderDiv!: HTMLElement;\r\n  @query('.spectrum-Slider-input')\r\n  protected sliderInput!: HTMLInputElement;\r\n  @query('.spectrum-Slider-value')\r\n  protected sliderValue!: HTMLElement;\r\n  @queryAll('.spectrum-Slider-track')\r\n  protected tracks!: HTMLElement;\r\n  @queryAll('.spectrum-Slider-handle')\r\n  protected handles!: HTMLElement;\r\n  @query('.spectrum-Slider-controls')\r\n  protected slider!: HTMLElement;\r\n\r\n  constructor() {\r\n    super();\r\n    this._mouseUpListener = this._mouseUp.bind(this);\r\n    this._mouseMoveListener = this._mouseMove.bind(this);\r\n  }\r\n\r\n  firstUpdated(changedProperties: any) {\r\n    if(!this.value) {\r\n      this.value = String(this.sliderInput.value);\r\n      // var sliderOffsetWidth = this.slider.offsetWidth;\r\n      // var sliderOffsetLeft = this.slider.offsetParent.getBoundingClientRect().left;\r\n      // var x = Math.max(Math.min(e.x - sliderOffsetLeft, sliderOffsetWidth), 0);\r\n      // var percent = (x / sliderOffsetWidth) * 100;\r\n      // this.value = String(Math.trunc(Math.trunc(percent) * (this.max - this.min) / 100) + this.min);\r\n    }\r\n  }\r\n\r\n  _mouseDown(e) {\r\n    window.addEventListener('mouseup', this._mouseUpListener);\r\n    window.addEventListener('mousemove', this._mouseMoveListener);\r\n  }\r\n\r\n  _mouseUp(e) {\r\n    window.removeEventListener('mouseup', this._mouseUpListener);\r\n    window.removeEventListener('mousemove', this._mouseMoveListener);\r\n  }\r\n\r\n  _mouseMove(e) {\r\n    console.log(e);\r\n    var leftTrack = this.tracks[0];\r\n    var rightTrack = this.tracks[1];\r\n    var handle = this.handles[0];\r\n    var sliderOffsetWidth = this.slider.offsetWidth;\r\n    var sliderOffsetLeft = this.slider.offsetParent.getBoundingClientRect().left;\r\n    var x = Math.max(Math.min(e.x - sliderOffsetLeft, sliderOffsetWidth), 0);\r\n    var percent = (x / sliderOffsetWidth) * 100;\r\n    \r\n    if (leftTrack && rightTrack) {\r\n      leftTrack.style.width = percent + '%';\r\n      rightTrack.style.width = (100 - percent) + '%';\r\n    }\r\n    handle.style.left = percent + '%';\r\n\r\n    this.value = String(Math.trunc(Math.trunc(percent) * (this.max - this.min) / 100) + this.min);\r\n    this.sliderInput.value = this.value;\r\n  }\r\n\r\n\r\n  protected render() {\r\n    return template.call(this);\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-slider': Slider;\r\n  }\r\n}\r\n"]}